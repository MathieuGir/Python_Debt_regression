import os
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
import statsmodels.api as sm
import matplotlib.pyplot as plt
import ruptures as rpt

data_folder = 'datas/'

final_data = pd.read_csv(os.path.join(data_folder, 'final_data.csv'), parse_dates=['DATE'])

# Ajouter les colonnes à retirer à la liste selected_columns
selected_columns = ['BOP', 'business_insolvencies', 'firms_creation', 'natality_rate', 'unemployment_rate', 'Valuation', 'Exch_rate', 'Fixed rate', 'negotiable_debts']

# Sélectionner les colonnes nécessaires
data_for_regression = final_data[selected_columns]

data_for_regression = data_for_regression.dropna()

# Retirer les colonnes spécifiées de X
X = data_for_regression.drop(columns=['negotiable_debts'])
Y = data_for_regression['negotiable_debts']
X = sm.add_constant(X)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Initialiser le modèle de régression linéaire avec statsmodels
model = sm.OLS(Y_train, X_train).fit()

# Imprimer un résumé des statistiques du modèle
print(model.summary())

# Faire des prédictions sur l'ensemble de test
predictions = model.predict(X_test)

# Évaluer la performance du modèle
mse = mean_squared_error(Y_test, predictions)
r2 = r2_score(Y_test, predictions)

print(f'\nMean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

matrix = pd.concat([Y, X], axis=1).to_numpy()

# Détection de changement avec ruptures pour chaque coefficient
breakpoints = []
for i in range(X.shape[1]):
    algo = rpt.Pelt(model="rbf").fit(matrix[:, [0, i + 1]])
    result = algo.predict(pen=10)  # Vous pouvez ajuster le paramètre de pénalité
    breakpoints.append(result)

# Convertissez les indices des points de rupture en un seul ensemble
breakpoints = np.unique(np.concatenate(breakpoints))

# Affichez les points de rupture
print("Points de rupture détectés :", breakpoints)

# Réinitialiser l'index du dataframe
final_data = final_data.reset_index(drop=True)

# Points de rupture détectés
breakpoints = [0, 40, 85, 135, len(final_data) - 1]

# Extraire les dates correspondantes aux points de rupture
breakpoint_dates = final_data.loc[breakpoints, 'DATE']

# Ajustez les dates pour le premier et le dernier segment
breakpoint_dates.iloc[0] = pd.to_datetime('2009-01-01')
breakpoint_dates.iloc[-1] = pd.to_datetime('2023-04-01')

# Divisez le dataframe en segments basés sur les dates de rupture
# Divisez le dataframe en segments basés sur les dates de rupture
segments = []
for i in range(len(breakpoints) - 1):
    start_date = pd.to_datetime(breakpoint_dates.iloc[i])
    end_date = pd.to_datetime(breakpoint_dates.iloc[i + 1])
    segment_data = final_data[(final_data['DATE'] >= start_date) & (final_data['DATE'] < end_date)]
    segments.append(segment_data)


# Ajustez une régression linéaire pour chaque segment avec statsmodels
for i, segment_data in enumerate(segments):
    print(f"\nSegment {i + 1} - Descriptive Statistics:")
    print(segment_data.describe())
    start_date = pd.to_datetime(breakpoint_dates.iloc[i])
    end_date = pd.to_datetime(breakpoint_dates.iloc[i + 1])

    X = segment_data.drop(columns=['negotiable_debts', 'DATE', 'Deposit facility', 'Minimum bid rate', 'Marginal lending facility'])
    Y = segment_data['negotiable_debts']

    # Ajoutez une constante à X pour estimer l'ordonnée à l'origine
    X = sm.add_constant(X)

    # Créez un modèle de régression linéaire avec statsmodels
    model = sm.OLS(Y, X)

    # Ajustez le modèle
    results = model.fit()

    # Affichez les résultats sous forme de tableau
    print(f"\nSegment {i + 1} - Period: {start_date} to {end_date}")
    print(results.summary())