import os
import pandas as pd
#pip install scikit-learn
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Chemin vers le dossier contenant les fichiers CSV
data_folder = 'datas/'

# Chargement des fichiers CSV depuis le dossier "datas"
final_data = pd.read_csv(os.path.join(data_folder + 'final_data.csv'))


# Sélectionner les colonnes pour la régression
selected_columns = ['BOP', 'business_insolvencies', 'firms_creation', 'natality_rate', 'unemployment_rate', 'Valuation', 'Exch_rate', 'negotiable_debts']

# Créer un DataFrame avec les colonnes sélectionnées
data_for_regression = final_data[selected_columns]

# Supprimer les lignes avec des valeurs manquantes
data_for_regression = data_for_regression.dropna()

# Séparer les variables indépendantes (X) et dépendantes (Y)
X = data_for_regression.drop(columns=['negotiable_debts'])
Y = data_for_regression['negotiable_debts']

# Diviser les données en ensembles d'entraînement et de test
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Initialiser le modèle de régression linéaire
model = LinearRegression()

# Entraîner le modèle sur l'ensemble d'entraînement
model.fit(X_train, Y_train)

# Faire des prédictions sur l'ensemble de test
predictions = model.predict(X_test)

# Évaluer la performance du modèle
mse = mean_squared_error(Y_test, predictions)
r2 = r2_score(Y_test, predictions)

print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

# Afficher les coefficients du modèle
coefficients = pd.DataFrame({'Variable': X.columns, 'Coefficient': model.coef_})
print('Coefficients:')
print(coefficients)

# Afficher l'intercept du modèle
print('Intercept:', model.intercept_)