#pip install plotly
import os
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output

# Charger les données
data_folder = 'datas/'
final_data = pd.read_csv(os.path.join(data_folder, 'final_data.csv'), parse_dates=['DATE'])

# Créer une figure avec Plotly Express
fig = px.scatter_matrix(
    final_data,
    dimensions=['BOP', 'business_insolvencies', 'firms_creation', 'natality_rate', 'unemployment_rate', 'Valuation', 'Exch_rate', 'Fixed rate', 'negotiable_debts'],
    color='negotiable_debts',
    title='Relations entre différentes variables et la dette négociable'
)

# Mettre à jour l'apparence du graphique
fig.update_traces(marker=dict(size=5), diagonal_visible=False)

# Ajouter un graphique de dispersion 3D
scatter_3d = go.Scatter3d(
    x=final_data['unemployment_rate'],
    y=final_data['Valuation'],
    z=final_data['negotiable_debts'],
    mode='markers',
    marker=dict(size=5, color=final_data['negotiable_debts'], colorscale='Viridis'),
    name='Dette négociable en fonction du taux de chômage et de la valorisation'
)

fig.add_trace(scatter_3d)

# Mettre à jour l'apparence du graphique
fig.update_traces(marker=dict(size=5))


# Mettre à jour le layout pour ajuster l'angle des étiquettes sur l'axe y
fig.update_layout(
    title_font=dict(family='Arial', size=20, color='black'),  # Police, taille et couleur du titre
    font=dict(family='Arial', size=10, color='black'),  # Police, taille et couleur du texte
    scene=dict(
        yaxis=dict(
            title_font=dict(family='Arial', size=15, color='black'),  # Police, taille, couleur de l'axe y
            tickmode='array',
            tickvals=list(range(len(final_data.columns))),
            ticktext=list(final_data.columns),
            categoryorder='array',
            categoryarray=list(final_data.columns)
        ),
    )
)

# Afficher le tableau de bord interactif
fig.show()



# Initialisation de l'application Dash
app = dash.Dash(__name__)

# Mise en page de l'application
app.layout = html.Div([
    html.H1("Tableau de Bord de la Dette Négociable"),

    # Filtre temporel
    dcc.RangeSlider(
        id='date-slider',
        marks={i: str(date) for i, date in enumerate(final_data['DATE'])},
        min=0,
        max=len(final_data) - 1,
        value=[0, len(final_data) - 1],
        step=1
    ),

    # Graphique principal
    dcc.Graph(id='main-graph'),

    # Graphique comparatif
    dcc.Graph(id='comparison-graph')
])

# Définition des callbacks pour la mise à jour des graphiques
@app.callback(
    [Output('main-graph', 'figure'),
     Output('comparison-graph', 'figure')],
    [Input('date-slider', 'value')]
)
def update_graph(selected_dates):
    # Extraction des données pour les dates sélectionnées
    selected_data = final_data.iloc[selected_dates[0]:selected_dates[1] + 1]

    # Graphique principal (à adapter selon vos besoins)
    main_fig = make_subplots(rows=2, cols=1, shared_xaxes=True)
    main_fig.add_trace(go.Scatter(x=selected_data['DATE'], y=selected_data['negotiable_debts'], mode='lines', name='Dette Négociable'), row=1, col=1)
    main_fig.add_trace(go.Scatter(x=selected_data['DATE'], y=selected_data['unemployment_rate'], mode='lines', name='Taux de Chômage'), row=2, col=1)
    main_fig.update_layout(title='Données Sélectionnées')

    # Graphique de comparaison
    comparison_fig = go.Figure()
    for i in range(0, len(selected_dates), 2):
        segment_data = final_data.iloc[selected_dates[i]:selected_dates[i + 1] + 1]
        comparison_fig.add_trace(go.Scatter(x=segment_data['DATE'], y=segment_data['negotiable_debts'], mode='lines', name=f'Segment {i//2 + 1}'))

    comparison_fig.update_layout(title='Comparaison des Segments Temporels')

    return main_fig, comparison_fig

# Exécution de l'application
if __name__ == '__main__':
    app.run_server(debug=True)



import pandas as pd
import matplotlib.pyplot as plt
import os


