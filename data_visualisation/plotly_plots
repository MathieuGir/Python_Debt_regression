#pip install plotly
import os
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output

data_folder = 'datas/'
final_data = pd.read_csv(os.path.join(data_folder, 'final_data.csv'), parse_dates=['DATE'])

# Création d'une figure avec Plotly Express
fig = px.scatter_matrix(
    final_data,
    dimensions=['BOP', 'business_insolvencies', 'firms_creation', 'natality_rate', 'unemployment_rate', 'Valuation', 'Exch_rate', 'Fixed rate', 'negotiable_debts'],
    color='negotiable_debts',
    title='Relations entre différentes variables et la dette négociable'
)

# Mettre à jour l'apparence du graphique
fig.update_traces(marker=dict(size=5), diagonal_visible=False)

# Ajout du graphique de dispersion 3D
scatter_3d = go.Scatter3d(
    x=final_data['unemployment_rate'],
    y=final_data['Valuation'],
    z=final_data['negotiable_debts'],
    mode='markers',
    marker=dict(size=5, color=final_data['negotiable_debts'], colorscale='Viridis')
)

fig.add_trace(scatter_3d)
fig.update_traces(marker=dict(size=5))


# Mise à jour du layout pour ajuster l'angle des étiquettes sur l'axe y
fig.update_layout(
    title_font=dict(family='Arial', size=20, color='black'),  # Police, taille et couleur du titre
    font=dict(family='Arial', size=10, color='black'),  # Police, taille et couleur du texte
    scene=dict(
        yaxis=dict(
            title_font=dict(family='Arial', size=15, color='black'),  # Police, taille, couleur de l'axe y
            tickmode='array',
            tickvals=list(range(len(final_data.columns))),
            ticktext=list(final_data.columns),
            categoryorder='array',
            categoryarray=list(final_data.columns)
        ),
    )
)

fig.show()

app = dash.Dash(__name__)

app.layout = html.Div([
    html.H1("Tableau de Bord de la Dette Négociable"),

    # Filtrage temporel
    dcc.RangeSlider(
        id='date-slider',
        marks={i: str(date) for i, date in enumerate(final_data['DATE'])},
        min=0,
        max=len(final_data) - 1,
        value=[0, len(final_data) - 1],
        step=1
    ),

    # Graph principal
    dcc.Graph(id='main-graph'),
    # Graph comparatif
    dcc.Graph(id='comparison-graph')
])

# Définition des callbacks pour la mise à jour des graphiques
@app.callback(
    Output('main-graph', 'figure'),
    [Input('date-slider', 'value')]
)
def update_graph(selected_dates):
    # Extraction des données pour les dates sélectionnées
    selected_data = final_data.iloc[selected_dates[0]:selected_dates[1] + 1]

    # Graphique principal (à adapter selon vos besoins)
    main_fig = make_subplots(rows=8, cols=1, shared_xaxes=True)

    main_fig.add_trace(go.Scatter(x=selected_data['DATE'], y=selected_data['negotiable_debts'], mode='lines', name='Dette Négociable'), row=1, col=1)
    main_fig.add_trace(go.Scatter(x=selected_data['DATE'], y=selected_data['unemployment_rate'], mode='lines', name='Taux de Chômage'), row=2, col=1)
    main_fig.add_trace(go.Scatter(x=selected_data['DATE'], y=selected_data['BOP'], mode='lines', name='Balance des paiements - Crédit - Transactions courantes'), row=3, col=1)
    main_fig.add_trace(go.Scatter(x=selected_data['DATE'], y=selected_data['business_insolvencies'], mode='lines', name="Nombre de défaillances d'entreprises par date de jugement - Données brutes - France - Tous secteurs d'activité"), row=4, col=1)
    main_fig.add_trace(go.Scatter(x=selected_data['DATE'], y=selected_data['firms_creation'], mode='lines', name="Nombre de création d'entreprises par date de jugement - Données brutes - France - Tous secteurs d'activité"), row=5, col=1)
    main_fig.add_trace(go.Scatter(x=selected_data['DATE'], y=selected_data['natality_rate'], mode='lines', name='Taux de natalité'), row=6, col=1)
    main_fig.add_trace(go.Scatter(x=selected_data['DATE'], y=selected_data['Valuation'], mode='lines', name='Taux de change au certain €/$'), row=7, col=1)
    main_fig.add_trace(go.Scatter(x=selected_data['DATE'], y=selected_data['Fixed rate'], mode='lines', name='Taux directeur'), row=8, col=1)

    main_fig.update_layout(title='Données Sélectionnées')
    main_fig.update_layout(height=1500)

    return main_fig



# Exécution de l'application
if __name__ == '__main__':
    app.run_server(debug=True)