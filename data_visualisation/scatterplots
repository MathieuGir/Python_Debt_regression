#Download Pypi package 
#pip install pynsee[full]
#pip install seaborn
#pip install scipy
import pandas as pd
import matplotlib.pyplot as plt
import re 
import seaborn as sns
import numpy as np
from scipy.stats import linregress
import matplotlib.font_manager as fm
from statsmodels.tsa.seasonal import seasonal_decompose
import os

from pynsee.utils.init_conn import init_conn
init_conn(insee_key='GvulBMLLd4u26RRdMPxYlvqjvHYa', insee_secret='MvDm1OBD_s1a4A33InvrYRT_wEga')
from pynsee.macrodata import * 
from pynsee.macrodata.get_series_list import get_series_list
from pynsee.macrodata.get_series import get_series



# Chemin vers le dossier contenant les fichiers CSV
data_folder = 'datas/'

# Chargement des fichiers CSV depuis le dossier "datas"
negotiable_debts = pd.read_csv(os.path.join(data_folder + 'negotiable_debts_filtered.csv'))
bop = pd.read_csv(os.path.join(data_folder, 'BOP_filtered.csv'))
business_insolvencies = pd.read_csv(os.path.join(data_folder, 'business_insolvencies_filtered.csv'))
firms_creation = pd.read_csv(os.path.join(data_folder, 'firms_creation_filtered.csv'))
natality_rate = pd.read_csv(os.path.join(data_folder, 'natality_rate_filtered.csv'))
unemployment_rate = pd.read_csv(os.path.join(data_folder, 'unemployment_rate_filtered.csv'))

def create_scatter_plot(data, plot_title, x_label, y_label, output_filename):
    # Convertir la colonne 'DATE' en format de date
    data['DATE'] = pd.to_datetime(data['DATE'], errors='coerce')
    
    # Supprimer les lignes avec des valeurs manquantes dans la colonne 'DATE'
    data = data.dropna(subset=['DATE'])
    
    # Utiliser une palette de couleurs pastelles
    sns.set_palette("pastel")
    
    # Utiliser une police spécifique 
    prop = fm.FontProperties(fname=fm.findfont(fm.FontProperties(family='Arial')))
    
    # Créer le scatter plot
    plt.scatter(data['DATE'], data[y_label], label='Données réelles')
    
    # Ajouter des étiquettes et un titre avec la nouvelle police
    plt.xlabel(x_label, fontproperties=prop)
    plt.ylabel(y_label, fontproperties=prop)
    plt.title(plot_title, fontproperties=prop)
    
    # Ajuster une ligne de régression polynomiale 
    days_since_start = (data['DATE'] - data['DATE'].min()).dt.days.values
    coefficients = np.polyfit(days_since_start, data[y_label], 17)
    polynomial = np.poly1d(coefficients)
    
    # Tracer la ligne de régression
    plt.plot(data['DATE'], polynomial(days_since_start), color='red', label='Régression linéaire')
    
    # Calculer le coefficient de détermination (R²)
    slope, intercept, r_value, p_value, std_err = linregress(days_since_start, data[y_label])
    r_squared = r_value ** 2
    
    # Afficher le R² sur le graphique avec la nouvelle police
    plt.text(0.95, 0.02, f'R² : {r_squared:.4f}', transform=plt.gca().transAxes, bbox=dict(facecolor='white', alpha=0.8), fontproperties=prop)
    
    # Afficher la légende avec la nouvelle police
    plt.legend(prop=prop)
    
    # Enregistrer le plot en tant que fichier PNG dans le dossier "data_visualisation"
    plt.savefig(os.path.join('data_visualisation', output_filename), bbox_inches='tight')
    
    # Afficher le plot
    plt.show()

# Utilisation de la fonction avec spécification des noms de fichiers de sortie
create_scatter_plot(negotiable_debts, 'Evolution de la dette négociable de l Etat', 'Date', 'negotiable_debts', 'negotiable_debts_scatter.png')
create_scatter_plot(firms_creation, 'Evolution du nombre de firmes créées', 'Date', 'firms_creation', 'firms_creation_scatter.png')
create_scatter_plot(unemployment_rate, 'Evolution du taux de chômage', 'Date', 'unemployment_rate', 'unemployment_rate_scatter.png')
create_scatter_plot(bop, 'Evolution de la balance des paiements', 'Date', 'BOP', 'BOP_scatter.png')
create_scatter_plot(natality_rate, 'Evolution du taux de natalité', 'Date', 'natality_rate', 'natality_rate_scatter.png')
create_scatter_plot(business_insolvencies, 'Evolution du nombre de défaillances de firmes par date de jugement en France tout secteur confondu', 'Date', 'business_insolvencies', 'business_insolvencies_scatter.png')



#Charger les données
data_folder = 'datas/'
final_data = pd.read_csv(os.path.join(data_folder, 'final_data.csv'), parse_dates=['DATE'])

# Garder uniquement les colonnes spécifiées dans selected_columns
selected_columns = ['DATE', 'BOP', 'business_insolvencies', 'firms_creation', 'natality_rate', 'unemployment_rate', 'Valuation', 'Exch_rate', 'Fixed rate', 'negotiable_debts']
df = final_data[selected_columns]

df['DATE'] = pd.to_datetime(df['DATE'])

# Définissez la colonne 'DATE' comme index
df.set_index('DATE', inplace=True)

# Création d'un DataFrame avec la date comme index
df_date = df.copy()  # Copie le DataFrame pour éviter la modification du DataFrame d'origine

# Analyse de séries chronologiques
result = seasonal_decompose(df_date['negotiable_debts'], model='additive', period=12)  # Assumption: Seasonal pattern repeats every 12 months

# Visualisation des composants (tendance, saisonnalité, résidus et évolution)
plt.figure(figsize=(12, 8))

plt.subplot(4, 1, 1)
plt.plot(result.trend, label='Tendance')
plt.legend()

plt.subplot(4, 1, 2)
plt.plot(result.seasonal, label='Saisonnalité')
plt.legend()

plt.subplot(4, 1, 3)
plt.plot(result.resid, label='Résidus')
plt.legend()

plt.subplot(4, 1, 4)
plt.plot(df_date['negotiable_debts'], label='Dette négociable')
plt.legend()

plt.tight_layout()
plt.show()
